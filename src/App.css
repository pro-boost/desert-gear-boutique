#root {
  width: 100%;
  margin: 0 auto;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em hsl(var(--dg-info) / 0.7));
}
.logo.vite:hover {
  filter: drop-shadow(0 0 2em hsl(var(--dg-primary) / 0.6));
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
  box-shadow: 0 10px 25px -5px hsl(var(--dg-primary) / 0.1),
    0 8px 10px -6px hsl(var(--dg-primary) / 0.1);
}

.read-the-docs {
  color: hsl(var(--dg-muted-foreground));
}

::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background: hsl(var(--dg-background));
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--dg-primary) / 0.5);
  border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--dg-primary) / 0.7);
}

/* Add smooth transition for theme changes */
.theme-transition * {
  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
}

/* Improve responsiveness */
@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* Animation for staggered card appearance */
.stagger-card:nth-child(1) { animation-delay: 0.1s; }
.stagger-card:nth-child(2) { animation-delay: 0.2s; }
.stagger-card:nth-child(3) { animation-delay: 0.3s; }
.stagger-card:nth-child(4) { animation-delay: 0.4s; }
.stagger-card:nth-child(5) { animation-delay: 0.5s; }
.stagger-card:nth-child(6) { animation-delay: 0.6s; }

/* Card animations */
.card-animated {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card-animated:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px -5px rgba(var(--dg-primary) / 0.1), 0 8px 10px -6px rgba(var(--dg-primary) / 0.1);
}

/* Card shimmer effect */
.card-shimmer {
  position: relative;
  overflow: hidden;
}

.card-shimmer::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 50%;
  height: 100%;
  background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.1), transparent);
  transform: skewX(-25deg);
  transition: all 0.6s ease;
  z-index: 1;
  pointer-events: none;
}

.card-shimmer:hover::before {
  left: 100%;
  transition: 0.8s;
}

/* Floating animations */
@keyframes float {
  0% {
    transform: translateY(0px) translateX(0px);
  }
  50% {
    transform: translateY(-20px) translateX(10px);
  }
  100% {
    transform: translateY(0px) translateX(0px);
  }
}

@keyframes float-delay {
  0% {
    transform: translateY(0px) translateX(0px);
  }
  50% {
    transform: translateY(20px) translateX(-10px);
  }
  100% {
    transform: translateY(0px) translateX(0px);
  }
}

@keyframes float-slow {
  0% {
    transform: translateY(0px) translateX(0px) rotate(0deg);
  }
  50% {
    transform: translateY(-15px) translateX(-10px) rotate(5deg);
  }
  100% {
    transform: translateY(0px) translateX(0px) rotate(0deg);
  }
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-float-delay {
  animation: float-delay 8s ease-in-out infinite;
}

.animate-float-slow {
  animation: float-slow 10s ease-in-out infinite;
}

/* Add vibrant orange glow to primary elements in light mode */
:root.light [class*="bg-primary"] {
  box-shadow: 0 0 20px rgba(255, 120, 0, 0.15);
}

:root.light .card:hover {
  border-color: rgba(255, 120, 0, 0.3);
}

.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background: hsl(var(--dg-background));
}

.gradient-overlay {
  position: absolute;
  inset: 0;
  background: hsl(var(--dg-primary) / 0.5);
  mix-blend-mode: overlay;
}

.gradient-overlay-strong {
  position: absolute;
  inset: 0;
  background: hsl(var(--dg-primary) / 0.7);
  mix-blend-mode: overlay;
}

.card-hover {
  box-shadow: 0 10px 25px -5px hsl(var(--dg-primary) / 0.1),
    0 8px 10px -6px hsl(var(--dg-primary) / 0.1);
}

.glass-effect {
  background: linear-gradient(
    to right,
    transparent,
    hsl(var(--dg-background) / 0.1),
    transparent
  );
}

.hover-card {
  box-shadow: 0 0 20px hsl(var(--dg-primary) / 0.15);
  border-color: hsl(var(--dg-primary) / 0.3);
}
